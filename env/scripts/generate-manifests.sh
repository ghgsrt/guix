#!/bin/bash

# Function to detect tools and versions
detect_tools() {
    local tools=()

    # Go detection
    if [[ -f "go.mod" ]]; then
        local go_version=$(grep "^go " go.mod | cut -d' ' -f2)
        tools+=("(\"go\" . \"$go_version\")")
    fi

    # TypeScript detection
    if [[ -f "tsconfig.json" ]]; then
        local ts_version=$(jq -r '.compilerOptions.target' tsconfig.json)
        tools+=("(\"typescript\" . \"$ts_version\")")
    fi

    # More tool detection...

    # Return as scheme list
    echo "(list ${tools[@]})"
}

# Generate the manifest file
generate_manifest() {
    local tools=$(detect_tools)

    # Use guix repl to generate and serialize the manifest
    guix repl << EOF > .guix-manifest
(use-modules (manifests)
			 (packages)
             (guix packages)
             (guix profiles)
             (srfi srfi-1))

;; Generate the manifest
(let ((manifest (generate-project-manifest $tools)))
  ;; Write it as a self-evaluating expression
  (format #t ";; Generated by guix-manifest-generator on ~a~%" (strftime "%Y-%m-%d %H:%M:%S" (localtime (current-time))))
  (format #t ";; Tools detected: ~a~%" '$tools)
  (format #t "~%;; This file is auto-generated. Do not edit directly.~%~%")
  (format #t "~%;; When tool versions change or new tools are added, run the following command to regenerate:~%")
  (format #t "~%;; .~%~%")
  (format #t "(let ()~%")
  (format #t "  (define manifest~%    ~a)~%" manifest)
  (format #t "  manifest)~%"))
EOF
}

# Main
if [[ ! -f ".guix-manifest" ]] || [[ "$1" == "--force" ]]; then
    generate_manifest
    echo "Manifest generated successfully"
else
    echo "Manifest already exists. Use --force to regenerate"
fi